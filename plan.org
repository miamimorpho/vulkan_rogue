* TODO

WORLD GEN!
screen resizing revisited
lua gui library - pick tile and editing modes to seperate debug tools from game engine
retained mode gui?
stitching maps?
map generator v1
NPCs / enemies basic basic
pathfinding
saving...

* GUI
first, process table, pass to GPU 'static' buffer, render to screen
start listening
if event, redraw elements on CPU, pass to GPU 'dynamic' buffer, render to screen
CPU memory -> GPU memory -> now we'are drawing layers

gfxNextLayer(Gfx)
gfxPresentLayers(Gfx, var args order)

* Linting
tidy vkterm
replace strncmp with memcmp and have layers have a static sized length name
write memory safe copy to allocation function vulkan
add fat pointer string library, polymorphise buffers?
message buffer -> ring buffer
changing tileset < - > in editor
container_of() on graphics API?
spatial hash grid

phase out C stdlib

* NPCs
pathfinding
AI ( move, stab )
speech

* Space 2

figure out the 360 degree portal in a field problem
a portal is two spaces of imaginary coordinates that share a position
add diagnol tiles, fill a cache then use that as base. for FOV

"The fundamental concept is that certain locations exist
simultaneously in multiple realities - like quantum entangled
spaces. Instead of thinking of them as doorways or connections,
they're better understood as areas where two separate spaces overlap
and share the same existence, similar to a Venn diagram in 3D
space."  [00:36]
"The shared space itself is defined by negative space - the absence
of normal space in both realities, What appears as a shadow on the surface of
the void is actually a window into another connected space."

When in zone A looking at a wormhole into zone B, light goes A -> Portal -> B is cast as shadow
When in zone B looking through a wormhole into zone A, A -> Portal -> A is cast as shadow
when in portal zone, draw both zone A and zone B on top of each other with OR gate



* Space 1

chunks can be stithed together on their cardinal borders
they overlap one row on a AND gate for movement bitmaps, so a variety of room prefabs can be designed with loose rules that garuntee some connectedness to their neighbors. this creates the problem of corners,
 a chunk position diagnolly of the current chunk has two
 potential states. NW could be accessed by
 O -> W -> NW
 O -> N -> NW
 the corner pieces will also be the AND result of potentially 4
 different chunks.
 
 
portals to simulate 3D room-over-room
restricted to fixed size "zones" that are connected by a graph
fixed interesting world size - beginning - end
forking branch like nethack

* Algebra of Space

on a worldmap level, get rid of x/y in favor of position structures
positions know what map they belong to and their
world of coordinates -> positions -> pointers to things
things know what position tile they are on
thus we can get position by going things -> positions -> coordinates

world map{
.positions[] (children)
.width
.size
}

position{
.x
.y
.entities
.map* (parent node)
}

entity{
.position* (parent node)
.extendable attributes
  attribute{
  .name
  .type
  .value
  }
}

* Spatial Distortions
to reduce memory usage across vast empty areas, a quadtree could be used to compress data, allowing empty quarters to have less memory associated with them. To create the kind of spatial distortions that may
feel like travelling through 3D or nD space, children can have multiple parent nodes. 'Folding' the 2D space and allowing mobiles to 'wormhole' across different areas on the map. It can also simulate 'room-over-room' in a strictly 2D world. To understand the world can only be described in relative coordinates from the observers point of view in many calculations. Field of vision, only being able to see from one point,
gives consistent orientation. Thus, the rules for movement are largely similar to those of seeing.

 if you know how minecraft and voxel engines represent spare-data
 and imagine those octotrees, each node is either empty, has blocks or
 have children with blocks  [13:15]
 if you start 'sharing' children across equally depth-n parents, you
	 start to fold space and can create wormholes

when perception enters a transitionary node, there is only one version of cells to see,
when perception leaves a node, there is two sets of neighbours it could see.
How do decide with side of the portal to see?
Light is always transported
hrmm, this process should feel like a natural movement through space and not a visual anomoly
this becomes a lot easier to imagine with 'transitionary rooms' that are convex shapes with one exit
and one entrance, and can be mixed amongst ordinary architecture
	 
* Cache System

text rendering is as fast as can be now anyway
Be able to save CPU redrawing by cacheing GPU draw commands
Adds 'layers' though being able to write to a buffer then arrange
their painting order before redrawing the whole screen each frame
Ability to save common GUI elements like buttons, scroll bars, ect
reduces cpu -> gpu transactions which saves some battery life speed on mobile platforms
goto?

- cacheChange(string_id)
if string_id does not exist, adds it to the list of buffers and alloc some memory for it
uploads current scratch buffer to GPU
internally changes state of current buffer to new id;

- cachePaint(string_id);
create indirect draw command for that section of glyphs in cmdb
always upload current cache to GPU before refreshing

* Instance Attributes
| InPosition           | x, y   | uint16_t uint16_t |
/limits terminal dimensions to 65536 chars by 65536 chars
| UV Encoding          | i      | uint10_t        |
/caps each texture atlas at 1024 characters each 0 - 1023 /
| texture Index        | i      | uint6_t         |
/limits renderer to 64 different texture samplers 0 - 63 /
| color indices        | fg, bg | uint8_t uint8_t  |
/limits colour palette to 256 colours/
/spare 16 bit number/
* Enemies and Items
spot - boston dynamics dog 
Palestine Cola
Bakeries
Tofu, Scrambled, grilled, deep fried, ect
Synth's are made of vegan meat
cultists
prefixes: cyber, pink, hellish

* vulkan style
| Functions | gfxFunctionName |
| Types     | GfxType         |
| Variables | variable_name   |
make pos x, pos y, textures_index, glyph_code, fgColor, bgColor
a coherent order

* CPU budget
60fps input/resize polling target fps - 16ms frame time
a 14ms wait on VkAcquireImageKHR gives 12.5% cpu usage:
    (1 - (14 / 16)) = 0.125

-02 no validation layers 1.5% 

* API
model API after ANSI escape codes + Ncurses
ANSI     ESC[2J      erase entire screen
curses   refresh()   Tell the curses system to dump the contents on the screen. It checks the window and updates only the portion which has been changed.
mvwaddch()	Move the cursor to a given position and then print as by addch() but into the given window.
Current implementation is addch(x, y, fg, bg, texture_index, ch);
probably better this way;
handling internal state may be shorter codebase.

* Procederal
Static worldmap, procederal local tiles

writing driven story
william burroughs cut up tecnique
markov chains + NLP
probably want to break out in python for string manipulation

* Art

| Machine        | Display in Tiles   | Tile Size |
| Gameboy Screen | 20*18              | 8*8       |
| MSX            | 32*24              | 8*8       |

Roguelike overworld map, use ascii chars to draw architecture
Ex

** ideas
timur novikov style landscapes for long distances, some towns
background of horizon can change for weather/time/biome
foreground is game area, could be follow cam or static cam.k
mayan glyphs in textmode appear as characters.
mario like overworld dragon quest 

* Turn based
https://journal.stuffwithstuff.com/2014/07/15/a-turn-based-game-loop/
Actions can take 1 or 2 'turns' this is decided randomly
Dexterity effects chance of action taking two turns
Moving diagnolly has a slightly higher chance of taking two turns
movement speed of 1 should be more typical
most time/speed systems become so complicated it appears as static to the player. Really all is important is the player knows when a 'double strike' or 'flurry' and some way to represent differences in walking speed over distance.


* woodcutting, firestarting
trees
lighters
usable objects

* combat
not annoying, tedious
pokemon mysery dungeon

* lore
"And there arose in the digital wastes a great bird of blue and it was named X and the users looked upon it and knew not their home"
"The servers lay dead in their racks like ancient bones, their fans whispering quiet liturgies into the cold datacenter dark"
"They witnessed the NFTs fall, their worthless tokens scattered across the blockchain like the teeth of dead men in a desert"
"The moderators rode forth into that digital waste, banning and smiting with neither mercy nor remorse, and their shadow was long upon the forum"
"And the Musk did speak cryptic utterances into the void, and his words carried a market Cap across the virtual plains like plague winds"
"In the subreddit there was a great silence. No post. No comment stirred upon the front page. The downvotes lay like dark stars in that digital firmament"
"Threads rose from the Meta depths like some ancient leviathan, bearing marks and scars of platforms long dead and forgotten"
"The TikTok algorithms moved through the data like wolves through sheep, devouring attention spans with neither mercy nor satiety"
"And the cryptocurrency traders wandered those broken markets like mendicant monks, clutching their worthless coins and muttering prayers to dead chains"
"Discord lay against the digital horizon like a burning city, its servers crying out in tongues of error logs and crash reports"
